# Generated by Django 3.1.5 on 2021-02-06 04:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import libraryApp.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Librarian",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="libraryApp.user",
                    ),
                ),
                ("joined_on", models.DateField()),
                (
                    "librarian_id",
                    models.CharField(max_length=12, primary_key=True, serialize=False),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("libraryApp.user",),
            managers=[
                ("objects", libraryApp.managers.LibrarianManager()),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="libraryApp.user",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        choices=[
                            ("CS", "COMPUTERS"),
                            ("IT", "INFORMATION TECHNOLOGY"),
                            ("EXTC", "ELECTRONICS AND TELECOMMUNICATION"),
                            ("ELEX", "ELECTRONICS"),
                            ("MECH", "MECHANICAL"),
                            ("CHEM", "CHEMICAL"),
                            ("BIOMED", "BIOMEDICAL"),
                            ("PROD", "PRODUCTION"),
                            ("OTHERS", "OTHERS"),
                        ],
                        max_length=40,
                    ),
                ),
                (
                    "sap_id",
                    models.CharField(
                        default=None,
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="SAP ID must be valid",
                                regex="^\\+?6?\\d{10,12}$",
                            )
                        ],
                    ),
                ),
                (
                    "graduation_year",
                    models.CharField(
                        choices=[
                            ("2021", 2021),
                            ("2022", 2022),
                            ("2023", 2023),
                            ("2024", 2024),
                            ("2025", 2025),
                        ],
                        max_length=4,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("libraryApp.user",),
            managers=[
                ("objects", libraryApp.managers.StudentManager()),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="libraryApp.user",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        choices=[
                            ("CS", "COMPUTERS"),
                            ("IT", "INFORMATION TECHNOLOGY"),
                            ("EXTC", "ELECTRONICS AND TELECOMMUNICATION"),
                            ("ELEX", "ELECTRONICS"),
                            ("MECH", "MECHANICAL"),
                            ("CHEM", "CHEMICAL"),
                            ("BIOMED", "BIOMEDICAL"),
                            ("PROD", "PRODUCTION"),
                            ("OTHERS", "OTHERS"),
                        ],
                        max_length=40,
                    ),
                ),
                (
                    "sap_id",
                    models.CharField(
                        default=None,
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="SAP ID must be valid",
                                regex="^\\+?6?\\d{10,12}$",
                            )
                        ],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("libraryApp.user",),
            managers=[
                ("objects", libraryApp.managers.TeacherManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="first_name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="last name"
                    ),
                ),
                (
                    "mobile",
                    models.CharField(blank=True, max_length=13, verbose_name="mobile"),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="address"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="is superuser"),
                ),
                (
                    "is_admin",
                    models.BooleanField(default=False, verbose_name="is admin"),
                ),
                (
                    "is_student",
                    models.BooleanField(default=False, verbose_name="is student"),
                ),
                (
                    "is_teacher",
                    models.BooleanField(default=False, verbose_name="is teacher"),
                ),
                (
                    "is_librarian",
                    models.BooleanField(default=False, verbose_name="is_librarian"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", libraryApp.managers.UserManager()),
            ],
        ),
    ]
